<ruleset name="Custom rules">
    <description>Custom rules</description>

    <!-- https://pmd.github.io/pmd-6.13.0/pmd_rules_java_bestpractices.html -->
    <!-- <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod"/>-->
    <rule ref="category/java/bestpractices.xml/AccessorClassGeneration"/>
    <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration"/>
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
    <!-- <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>-->
    <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables"/>
    <!-- <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>-->
    <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
    <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
    <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
    <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>
    <rule ref="category/java/bestpractices.xml/ForLoopVariableCount"/>
    <rule ref="category/java/bestpractices.xml/GuardLogStatement"/>
    <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage"/>
    <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts"/>
    <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert"/>
    <rule ref="category/java/bestpractices.xml/JUnitUseExpected"/>
    <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
    <rule ref="category/java/bestpractices.xml/MissingOverride"/>
    <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine"/>
    <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
    <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons"/>
    <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>
    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
    <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
    <!-- <rule ref="category/java/bestpractices.xml/SystemPrintln"/>-->
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
    <rule ref="category/java/bestpractices.xml/UnusedImports"/>
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>
    <rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue"/>
    <rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue"/>
    <rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue"/>
    <rule ref="category/java/bestpractices.xml/UseAssertTrueInsteadOfAssertEquals"/>
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
    <rule ref="category/java/bestpractices.xml/UseTryWithResources"/>
    <!-- <rule ref="category/java/bestpractices.xml/UseVarargs"/>-->
    <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean"/>

    <!-- https://pmd.github.io/pmd-6.13.0/pmd_rules_java_codestyle.html -->
    <!-- <rule ref="category/java/codestyle.xml/AtLeastOneConstructor"/>-->
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/codestyle.xml/AvoidFinalLocalVariable"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
    <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>
    <!-- <rule ref="category/java/codestyle.xml/CallSuperInConstructor"/>-->
    <!-- <rule ref="category/java/codestyle.xml/ClassNamingConventions"/> -->
    <!-- <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier"/>-->
    <rule ref="category/java/codestyle.xml/ConfusingTernary"/>
    <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
    <rule ref="category/java/codestyle.xml/DefaultPackage"/>
    <rule ref="category/java/codestyle.xml/DontImportJavaLang"/>
    <rule ref="category/java/codestyle.xml/DuplicateImports"/>
    <!-- <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>-->
    <rule ref="category/java/codestyle.xml/ExtendsObject"/>
    <!-- Later -->
    <!-- <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/> -->
    <!-- Later -->
    <!-- <rule ref="category/java/codestyle.xml/FieldNamingConventions"/> -->
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions"/>
    <rule ref="category/java/codestyle.xml/GenericsNaming"/>
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
    <!-- <rule ref="category/java/codestyle.xml/LinguisticNaming"/>-->
    <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention"/>
    <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention"/>
    <!-- <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal"/>-->
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions"/>
    <!-- <rule ref="category/java/codestyle.xml/LongVariable"/>-->
    <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention"/>
    <!-- <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal"/>-->
    <rule ref="category/java/codestyle.xml/MethodNamingConventions"/>
    <rule ref="category/java/codestyle.xml/NoPackage"/>
    <!-- <rule ref="category/java/codestyle.xml/OnlyOneReturn"/>-->
    <rule ref="category/java/codestyle.xml/PackageCase"/>
    <!-- <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>-->
    <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention"/>
    <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention"/>
    <!-- <rule ref="category/java/codestyle.xml/ShortClassName"/>-->
    <!-- <rule ref="category/java/codestyle.xml/ShortMethodName"/>-->
    <!-- <rule ref="category/java/codestyle.xml/ShortVariable"/>-->
    <rule ref="category/java/codestyle.xml/TooManyStaticImports"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/codestyle.xml/UseDiamondOperator"/>
    <rule ref="category/java/codestyle.xml/UselessParentheses"/>
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals"/>

    <!-- https://pmd.github.io/pmd-6.13.0/pmd_rules_java_design.html -->
    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod"/>
    <!-- <rule ref="category/java/design.xml/AvoidCatchingGenericException"/> -->
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
    <rule ref="category/java/design.xml/AvoidRethrowingException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
    <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures"/>
    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <rule ref="category/java/design.xml/CollapsibleIfStatements"/>
    <rule ref="category/java/design.xml/CouplingBetweenObjects"/>
    <!-- <rule ref="category/java/design.xml/CyclomaticComplexity"/> -->
    <!-- <rule ref="category/java/design.xml/DataClass"/> -->
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
    <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
    <rule ref="category/java/design.xml/ExcessiveClassLength"/>
    <rule ref="category/java/design.xml/ExcessiveImports"/>
    <rule ref="category/java/design.xml/ExcessiveMethodLength"/>
    <!-- <rule ref="category/java/design.xml/ExcessiveParameterList"/> -->
    <rule ref="category/java/design.xml/ExcessivePublicCount"/>
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
    <rule ref="category/java/design.xml/GodClass"/>
    <!-- <rule ref="category/java/design.xml/ImmutableField"/> -->
    <!-- <rule ref="category/java/design.xml/LawOfDemeter"/> -->
    <rule ref="category/java/design.xml/LogicInversion"/>
    <!-- <rule ref="category/java/design.xml/LoosePackageCoupling"/> -->
    <rule ref="category/java/design.xml/NcssCount"/>
    <!-- <rule ref="category/java/design.xml/NPathComplexity"/> -->
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException"/>
    <rule ref="category/java/design.xml/SimplifiedTernary"/>
    <rule ref="category/java/design.xml/SimplifyBooleanAssertion"/>
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
    <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
    <rule ref="category/java/design.xml/SimplifyConditional"/>
    <rule ref="category/java/design.xml/SingularField"/>
    <rule ref="category/java/design.xml/SwitchDensity"/>
    <rule ref="category/java/design.xml/TooManyFields"/>
    <!-- <rule ref="category/java/design.xml/TooManyMethods"/> -->
    <rule ref="category/java/design.xml/UselessOverridingMethod"/>
    <rule ref="category/java/design.xml/UseObjectForClearerAPI"/>
    <rule ref="category/java/design.xml/UseUtilityClass"/>

    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>
    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
    <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
    <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
    <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
    <rule ref="category/java/errorprone.xml/CheckSkipResult"/>
    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
    <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>
    <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
    <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>
    <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>
    <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>
    <rule ref="category/java/errorprone.xml/ImportFromSamePackage"/>
    <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
    <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>
    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>

    <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>
    <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>
    <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>

    <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
    <rule ref="category/java/performance.xml/BooleanInstantiation"/>

</ruleset>
